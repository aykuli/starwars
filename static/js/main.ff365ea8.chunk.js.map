{"version":3,"sources":["components/error-indicator/boom.svg","services/swapi-service.js","services/dummy-swapi-service.js","components/header/index.js","components/header/header.jsx","components/spinner/index.js","components/spinner/spinner.jsx","components/error-indicator/index.js","components/error-indicator/error-indicator.jsx","components/random-planet/random-planet.jsx","components/random-planet/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.jsx","components/swapi-service-context/swapi-service-context.jsx","components/row/index.js","components/row/row.jsx","components/error-button/index.js","components/error-button/error-button.js","components/item-details/item-details.jsx","components/item-details/index.js","components/hoc-helpers/with-data.jsx","components/hoc-helpers/with-swapi-service.jsx","components/hoc-helpers/compose.js","components/hoc-helpers/with-child-function.jsx","components/sw-components/person-details.jsx","components/sw-components/planet-details.jsx","components/sw-components/starship-details.jsx","components/item-list/item-list.jsx","components/item-list/index.js","components/sw-components/item-lists.jsx","components/pages/people-page.jsx","components/pages/planet-page.jsx","components/pages/starship-page.jsx","components/pages/login-page.js","components/pages/secret-page.js","components/app/index.js","components/app/app.jsx","index.js"],"names":["module","exports","SwapiService","_apiBase","_imageBase","_extractId","item","url","match","getResource","a","fetch","res","ok","console","log","status","json","_transformPlanet","planet","id","name","population","rotationPeriod","rotation_period","diameter","getAllPlanets","results","map","getPlanet","getPlanetImage","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","getAllPeople","getPerson","getPersonImage","_transformStarship","ship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","getAllStarships","getStarship","getStarshipImage","DummySwapiService","_people","_planets","_starships","Header","onServiceToggle","className","to","onClick","Spinner","ErrorIndicator","src","icon","alt","RandomPlanet","state","isLoading","isError","swapiService","onPlanetLoaded","setState","onError","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","prevProps","spinner","errorMsg","planetView","Component","defaultProp","PlanetView","ErrorBoundry","isWasError","children","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","Row","left","right","ErrorButton","renderError","foo","bar","Record","field","label","ItemDetail","isLoaded","image","updateItem","itemId","getData","getImgUrl","Children","child","cloneElement","withData","View","data","updateList","error","withSwapiService","mapMethodsToProps","Wrapped","serviceProps","compose","func","comp","reduceRight","prevRes","f","withChildFunction","fn","ItemList","onItemSelected","renderLabel","items","key","defaultProps","PersonList","PlanetList","StarshipList","withRouter","history","params","push","PlanetPage","selectedItem","LoginPage","isLoggedIn","onLogin","SecretPage","App","Number","value","path","exact","render","component","PeoplePage","StarshipPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ff365ea8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.57a744b1.svg\";","export default class SwapiService {\r\n    _apiBase = 'https://swapi.co/api/';\r\n    _imageBase='https://starwars-visualguide.com/assets/img';\r\n\r\n    _extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(idRegExp)[1];\r\n    }\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n    \r\n        if (!res.ok) {\r\n            console.log(`Could not fetch this url: ${this._apiBase}${url}, \\n received ${res.status}`)\r\n        }    \r\n        return await res.json();\r\n    }\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter,\r\n        }\r\n    }\r\n\r\n    getAllPlanets = async () => {\r\n        const res = await this.getResource(`planets/`)\r\n        return res.results.map(this._transformPlanet);\r\n    }\r\n\r\n    getPlanet = async (id) => {\r\n        const planet = await this.getResource(`planets/${id}/`)\r\n        return this._transformPlanet(planet);\r\n    }\r\n    \r\n    getPlanetImage = (id) => {\r\n        return `${this._imageBase}/planets/${id}.jpg`;\r\n    }\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color,\r\n        }\r\n    }\r\n\r\n    getAllPeople = async () => {\r\n        const res = await this.getResource(`people`);\r\n        return res.results.map(this._transformPerson);\r\n    }\r\n\r\n    getPerson = async (id) => {\r\n        const person = await this.getResource(`people/${id}/`);\r\n        return this._transformPerson(person);\r\n    }\r\n\r\n    getPersonImage = (id) => {\r\n        return `${this._imageBase}/characters/${id}.jpg`;\r\n    }\r\n\r\n    _transformStarship = (ship) => {\r\n        return {\r\n            id: this._extractId(ship),\r\n            name: ship.name,\r\n            model: ship.model,\r\n            manufacturer: ship.manufacturer,\r\n            costInCredits: ship.costInCredits,\r\n            length: ship.length,\r\n            crew: ship.crew,\r\n            passengers: ship.passengers,\r\n            cargoCapacity: ship.cargoCapacity,\r\n        }\r\n    }\r\n\r\n    getAllStarships = async () => {\r\n        const res = await this.getResource(`starships/`)\r\n        return res.results.map(this._transformStarship);\r\n    }\r\n\r\n    getStarship = async (id) => {\r\n        const ship = await this.getResource(`starships/${id}/`);\r\n        return this._transformStarship(ship)\r\n    }\r\n\r\n    getStarshipImage = (id) => {\r\n        return `${this._imageBase}/starships/${id}.jpg`;\r\n    }\r\n}\r\n","export default class DummySwapiService {\r\n\r\n    _people = [\r\n      {\r\n        id: 1,\r\n        name: 'Bilbo Baggins [TEST DATA]',\r\n        gender: 'male',\r\n        birthYear: 'long ago',\r\n        eyeColor: 'dark brown'\r\n      },\r\n  \r\n      {\r\n        id: 2,\r\n        name: 'Frodo Baggins [TEST DATA]',\r\n        gender: 'male',\r\n        birthYear: 'long ago',\r\n        eyeColor: 'dark brown'\r\n      }\r\n    ];\r\n  \r\n    _planets = [\r\n      {\r\n        id: 1,\r\n        name: 'Earth [TEST DATA]',\r\n        population: '7.530.000.000',\r\n        rotationPeriod: '23 hours 56 seconds',\r\n        diameter: '12.742 km'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Venus [TEST DATA]',\r\n        population: 'not known',\r\n        rotationPeriod: '243 days',\r\n        diameter: '12.104 km'\r\n      }\r\n    ];\r\n  \r\n    _starships = [\r\n      {\r\n        id: 1,\r\n        name: 'USS Enterprise [TEST DATA]',\r\n        model: 'NCC-1701-C',\r\n        manufacturer: 'Northrop Grumman Shipbuilding',\r\n        costInCredits: 'not known',\r\n        length: 'approx 300 meters',\r\n        crew: 1000,\r\n        passengers: 50,\r\n        cargoCapacity: 100\r\n      }\r\n    ];\r\n  \r\n    getAllPeople = async () => {\r\n      return this._people;\r\n    };\r\n  \r\n    getPerson = async () => {\r\n      return this._people[0];\r\n    };\r\n  \r\n    getAllPlanets = async () => {\r\n      return this._planets;\r\n    };\r\n  \r\n    getPlanet = async () => {\r\n      return this._planets[0]\r\n    };\r\n  \r\n    getAllStarships = async () => {\r\n      return this._starships;\r\n    };\r\n  \r\n    getStarship = async () => {\r\n      return this._starships[0];\r\n    };\r\n  \r\n    getPersonImage = () => {\r\n      return `https://placeimg.com/400/500/people`\r\n    };\r\n  \r\n    getStarshipImage = () => {\r\n      return `https://placeimg.com/600/400/tech`;\r\n    };\r\n  \r\n    getPlanetImage = () => {\r\n      return `https://placeimg.com/400/400/nature`\r\n    };\r\n  }\r\n  ","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './header.css';\r\n\r\nconst Header = ({ onServiceToggle }) => {\r\n    return (\r\n        <nav className=\"header d-flex\">\r\n            <h1><Link to=\"/\">StarDB</Link></h1>            \r\n            <ul className=\"d-flex\">\r\n                <li><Link to=\"/people/\">People</Link></li>\r\n                <li><Link to=\"/planets/\">Planets</Link></li>\r\n                <li><Link to=\"/starships/\">Starships</Link></li>\r\n                <li><Link to=\"/login\">Login</Link></li>\r\n                <li><Link to=\"/secret\">Secret</Link></li>\r\n            </ul>\r\n            <button \r\n                className=\"btn btn-primary\"\r\n                onClick={onServiceToggle}>Toggle data</button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-bean-eater-frhxylmycio\">\r\n            <div className=\"ldio-6hhoo741a0a\">\r\n                <div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n                <div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nimport './error-indicator.css';\r\nimport icon from './boom.svg';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <img src={icon} alt=\"error icon\" />\r\n            <div>\r\n                <p className=\"boom\">BOOM!</p>\r\n                <span>Something has gone terrribly wrong,</span>\r\n                <span>but we already send droid to fix it.</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ErrorIndicator;\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './random-planet.css';\r\n\r\nimport SwapiService from '../../services/swapi-service';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator'\r\n\r\nexport default class RandomPlanet extends Component {\r\n    static defaultProp = {\r\n        updateInterval: 10000,\r\n    }\r\n    \r\n    static propTypes = {\r\n        updateInterval: PropTypes.number,\r\n    }\r\n\r\n    state = {\r\n        planet: {},\r\n        isLoading: true,\r\n        isError: false,\r\n    }\r\n\r\n    swapiService = new SwapiService();\r\n\r\n\r\n    componentDidMount() {\r\n        const { updateInterval } = this.props;\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, updateInterval);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.planet !== prevProps.planet) {\r\n            this.updatePlanet();\r\n        }\r\n    }\r\n\r\n    onPlanetLoaded = (planet) => this.setState({planet, isLoading: false});\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            isError: true,\r\n            isLoading: false,\r\n        });\r\n    }\r\n\r\n    updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 25) + 3;\r\n        this.swapiService.getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    render() {\r\n        const { planet, isLoading, isError } = this.state;\r\n        const spinner = isLoading ? <Spinner /> : null;\r\n        const errorMsg = isError ? <ErrorIndicator /> : null;\r\n        const isShowData = !(isLoading || isError);\r\n        const planetView = isShowData ? <PlanetView {...planet} /> : null;\r\n\r\n        return (\r\n            <div className=\"random-planet jumbotron rounded\">\r\n                {spinner}\r\n                {planetView}\r\n                {errorMsg}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst PlanetView = (planet) => {\r\n    const { id, name, population, rotationPeriod, diameter } = planet;\r\n    return (\r\n        <>\r\n            <img    className=\"planet-image\"\r\n                        src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\r\n                        alt=\"temp\" />\r\n            <div>\r\n                <h4>{ name }</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;","import ErrorBoundry from './error-boundry';\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nclass ErrorBoundry extends Component {\r\n    state = {\r\n        isWasError: false,\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ isWasError : true });\r\n    }\r\n\r\n    render() {\r\n        return this.state.isWasError ? <ErrorIndicator /> : this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst { \r\n    Provider: SwapiServiceProvider, \r\n    Consumer: SwapiServiceConsumer,\r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceProvider,\r\n    SwapiServiceConsumer,\r\n}","import Row from './row';\r\n\r\nexport default Row;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Row = ({ left, right }) => {\r\n    return (\r\n        <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n                {left}\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                {right}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nRow.propTypes = {\r\n    left: PropTypes.node,\r\n    right: PropTypes.node,\r\n}\r\n\r\nexport default Row;","import ErrorButton from './error-button';\n\nexport default ErrorButton;\n","import React, { Component } from 'react';\n\nimport './error-button.css';\n\nexport default class ErrorButton extends Component {\n\n  state = {\n    renderError: false\n  };\n\n  render() {\n    if (this.state.renderError) {\n      this.foo.bar = 0;\n    }\n\n    return (\n      <button\n        className=\"error-button btn btn-danger btn-lg\"\n        onClick={() => this.setState({renderError: true})}>\n        Throw Error\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nimport './item-details.css';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorButton from '../error-button';\r\n\r\nconst Record = ({ item, field, label}) => {\r\n    return (        \r\n        <li className=\"list-group-item\">\r\n        <span className=\"term\">{label}</span>\r\n        <span>{item[field]}</span>\r\n    </li>\r\n    )\r\n};\r\n\r\nexport { Record };\r\n\r\nexport default class ItemDetails extends Component {\r\n    state = {\r\n        item: null,\r\n        isLoaded: false,\r\n        image: null,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n\r\n    updateItem() {\r\n        const { itemId, getData, getImgUrl } = this.props;\r\n        if (!itemId) return;\r\n\r\n        getData(itemId)\r\n            .then(item => this.setState({\r\n                item, \r\n                isLoaded: true,\r\n                image: getImgUrl(item.id),\r\n            }))\r\n            .catch(this.onError);\r\n\r\n    }\r\n    onError = () => {\r\n        console.log('eror')\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemId !== prevProps.itemId\r\n            || this.props.getData !== prevProps.getData\r\n            || this.props.getImgUrl !== prevProps.getImgUrl) {\r\n            this.updateItem();\r\n        }\r\n    }\r\n\r\n    render() {        \r\n        const { item, isLoaded, image } = this.state;\r\n\r\n        if (!this.state.item) return <span>Loading...</span>;\r\n\r\n        const { name } = item;\r\n\r\n        const spinner = !isLoaded ? <Spinner /> : null;\r\n       \r\n        return (\r\n            <div className=\"item-details card\">                \r\n                <img    className=\"item-image\"\r\n                        src={image}\r\n                        alt={name} />\r\n                <div className=\"card-body\">\r\n                    <h4>{name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            React.Children.map(this.props.children, child => {\r\n                                return React.cloneElement(child, { item });\r\n                            })\r\n                        }                      \r\n                    </ul>\r\n                    <ErrorButton />\r\n                </div>\r\n                {spinner}\r\n            </div>\r\n        );\r\n    }\r\n}","import ItemDetail, { Record } from './item-details';\r\n\r\nexport default ItemDetail;\r\nexport { Record };","import React, { Component } from 'react';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nconst withData = (View) => {\r\n    return class extends Component {\r\n        state = {\r\n            data: null,\r\n            isLoading: true,\r\n            isError: false,\r\n        }\r\n    \r\n        onError = () => {\r\n            this.setState({ isError: true, isLoading:false });\r\n        }\r\n    \r\n        componentDidMount() {        \r\n            this.updateList();\r\n        }\r\n\r\n        updateList() {\r\n            this.setState({ isLoading: true, error: false })\r\n            this.props.getData()\r\n                .then(data => {\r\n                    this.setState({ data, isLoading: false, });\r\n                })\r\n                .catch(this.onError);   \r\n        }\r\n\r\n        componentDidUpdate(prevProps) {\r\n            if (this.props.getData !== prevProps.getData) {\r\n                this.updateList();\r\n            }\r\n        }\r\n\r\n        render() {\r\n            const { data, isLoading, isError } = this.state;\r\n\r\n            if (isLoading) return <Spinner />;\r\n            if (isError) return <ErrorIndicator />\r\n\r\n            return <View {...this.props} data={data} />\r\n        }\r\n    }\r\n}\r\n\r\nexport default withData;","import React from 'react';\r\nimport { SwapiServiceConsumer } from '../swapi-service-context';\r\n\r\nconst withSwapiService = (mapMethodsToProps) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        const serviceProps = mapMethodsToProps(swapiService);\r\n                        return (\r\n                            <Wrapped {...props} {...serviceProps} />\r\n                        )\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default withSwapiService;","const compose = (...func) => (comp) => func.reduceRight((prevRes, f) => f(prevRes), comp); \r\nexport default compose;","import React from 'react';\r\n\r\nconst withChildFunction = (fn) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped {...props}>\r\n                {fn}\r\n            </Wrapped>\r\n        )\r\n    }\r\n};\r\n\r\nexport default withChildFunction;","import React from 'react';\r\n\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst PersonDetails = props => (\r\n    <ItemDetails {...props}>              \r\n        <Record field=\"gender\" label='Gender'/>\r\n        <Record field='eyeColor' label='Eye Color'/>\r\n    </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getPerson,\r\n        getImgUrl: swapiService.getPersonImage,\r\n    }\r\n}\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\r\n\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst PlanetDetails = props => (\r\n    <ItemDetails {...props}>              \r\n        <Record field=\"diameter\" label='Diameter'/>\r\n        <Record field=\"rotationPeriod\" label='Rotation Period'/>\r\n        <Record field='population' label='Population'/>\r\n    </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getPlanet,\r\n        getImgUrl: swapiService.getPlanetImage,\r\n    }\r\n}\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from 'react';\r\n\r\nimport ItemDetails, { Record } from '../item-details';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst StarshipDetails = props => (\r\n    <ItemDetails {...props}>              \r\n        <Record field=\"length\" label='Length'/>\r\n        <Record field='crew' label='Crew'/>\r\n    </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getStarship,\r\n        getImgUrl: swapiService.getStarshipImage,\r\n    }\r\n}\r\n\r\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './item-list.css';\r\n\r\nconst ItemList = (props) => {\r\n    const { data, onItemSelected , children: renderLabel} = props;\r\n    const items = data.map(item => {\r\n        const { id } = item;\r\n        const label = renderLabel(item);\r\n        return (\r\n            <li className='list-group-item'\r\n                key={id}\r\n                onClick={() => onItemSelected(id)}>\r\n                {label}\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ul className=\"item-list list-group\">\r\n            {items}\r\n        </ul>\r\n    )\r\n}\r\n\r\nItemList.defaultProps = {\r\n    onItemSelected: () => {},\r\n}\r\n\r\nItemList.propTypes = {\r\n    onItemSelected: PropTypes.func,\r\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    children: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default ItemList;","import ItemList from './item-list';\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport ItemList from '../item-list';\r\nimport { withData, withSwapiService, compose, withChildFunction } from '../hoc-helpers';\r\n\r\nconst renderModelAndName = ({ name, model }) => (\r\n    <span>\r\n        {name} (<span className=\"prop\">{model}</span>)\r\n    </span>\r\n);\r\nconst renderNameAndGender = ({ name, gender }) => (\r\n    <span>\r\n        {name} (<span className=\"prop\">{gender}</span>)\r\n    </span>\r\n);\r\nconst renderNameAndDiameter = ({ name, diameter }) => (\r\n    <span>\r\n        {name} (<span className=\"prop\">diameter={diameter}</span>)\r\n    </span>\r\n);\r\n\r\nconst mapPersonMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getAllPeople,\r\n    }\r\n}\r\n\r\nconst mapPlanetMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getAllPlanets,\r\n    }\r\n}\r\n\r\nconst mapStarshipMethodsToProps = swapiService => {\r\n    return {\r\n        getData: swapiService.getAllStarships,\r\n    }\r\n}\r\n\r\nconst PersonList = compose( withSwapiService(mapPersonMethodsToProps),\r\n                            withData,\r\n                            withChildFunction(renderNameAndGender))\r\n                            (ItemList);\r\nconst PlanetList = compose( withSwapiService(mapPlanetMethodsToProps),\r\n                            withData,\r\n                            withChildFunction(renderNameAndDiameter))\r\n                            (ItemList);\r\nconst StarshipList = compose(withSwapiService(mapStarshipMethodsToProps),\r\n                            withData,\r\n                            withChildFunction(renderModelAndName))\r\n                            (ItemList);\r\n\r\nexport {\r\n    PersonList,\r\n    PlanetList,\r\n    StarshipList\r\n};","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport Row from '../row';\r\nimport {\r\n    PersonList,\r\n    PersonDetails,\r\n} from '../sw-components';\r\n\r\nconst PeoplePage = ({ history, match }) => {\r\n    const { id } = match.params;\r\n    return (\r\n        <Row \r\n            left={<PersonList onItemSelected={(id) => history.push(`/people/${id}`)} />} \r\n            right={<PersonDetails itemId={id} />}\r\n        />\r\n    );\r\n};\r\n    \r\n\r\nexport default withRouter(PeoplePage);\r\n","import React, { Component } from 'react';\r\n\r\nimport Row from '../row';\r\nimport {\r\n    PlanetList,\r\n    PlanetDetails,\r\n} from '../sw-components';\r\n\r\nexport default class PlanetPage extends Component {\r\n    state = {\r\n        selectedItem: null,\r\n    }\r\n\r\n    onItemSelected = (selectedItem) => {\r\n        this.setState({ selectedItem })\r\n    }\r\n\r\n    render() {\r\n        const { selectedItem } = this.state;\r\n\r\n        return (\r\n            <Row \r\n                left={<PlanetList onItemSelected={this.onItemSelected}/>} \r\n                right={<PlanetDetails itemId={selectedItem}/>} />\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { StarshipList } from '../sw-components';\r\n\r\nconst StarshipPage = ({ history }) => (\r\n    <StarshipList \r\n        onItemSelected={(itemId) => {\r\n            history.push(`/starships/${itemId}`);\r\n        }}/>\r\n);\r\n\r\nexport default withRouter(StarshipPage);","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\r\n    return isLoggedIn ? \r\n        <Redirect to=\"/\" />\r\n        : <div className=\"jumbotron\">\r\n            <h3>Login to see secret page</h3>\r\n            <button \r\n                className=\"btn btn-primary\"\r\n                onClick={onLogin}>\r\n                Login\r\n            </button>\r\n        </div>\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst SecretPage = ({ isLoggedIn }) => {\r\n    if (isLoggedIn) {\r\n        return (\r\n            <div className=\"jumbotron text-center\">\r\n                <h3>Secret page my page not read</h3>\r\n            </div>\r\n        )\r\n    }\r\n    return <Redirect to=\"/login\" />;\r\n}\r\n\r\nexport default SecretPage;","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport './app.css';\r\n\r\nimport SwapiService from '../../services/swapi-service';\r\nimport DummySwapiService from '../../services/dummy-swapi-service';\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport ErrorBoundry from '../error-boundry';\r\nimport { SwapiServiceProvider } from '../swapi-service-context';\r\nimport { \r\n    PeoplePage, \r\n    PlanetPage, \r\n    StarshipPage,\r\n    LoginPage, \r\n    SecretPage \r\n} from '../pages';\r\nimport { StarshipDetails } from '../sw-components';\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        isWasError: false,\r\n        swapiService: new SwapiService(),\r\n        isLoggedIn: false,\r\n    }\r\n    \r\n    componentDidCatch() {\r\n        this.setState({ isWasError: true });\r\n    }\r\n\r\n    onLogin = () => {\r\n        this.setState({ isLoggedIn: true});\r\n    }\r\n\r\n    onServiceToggle = () => {\r\n        this.setState(({ swapiService }) => {\r\n            const Service = swapiService instanceof SwapiService ? \r\n                DummySwapiService : SwapiService;\r\n            return { swapiService: new Service() };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isWasError)  {\r\n            return <ErrorIndicator />\r\n        }\r\n        const updateInterval = Number(\"20000\");\r\n        const { isLoggedIn } = this.state;\r\n\r\n        return (\r\n            <ErrorBoundry>\r\n                <SwapiServiceProvider value={this.state.swapiService}>\r\n                    <Router>\r\n                        <div className=\"stardb-app\">\r\n                            <Header \r\n                                onServiceToggle={this.onServiceToggle}/>\r\n                            <RandomPlanet \r\n                                updateInterval={updateInterval} />\r\n\r\n                            <Switch>\r\n                                <Route  path=\"/\" \r\n                                        exact \r\n                                        render={() => <h2 className=\"main-page\">Welcome to StarWars data-base</h2>} />\r\n                                \r\n                                <Route  path=\"/people/:id?\" \r\n                                        component={PeoplePage} />\r\n                                                                \r\n                                <Route  path=\"/planets\" \r\n                                        component={PlanetPage} />\r\n                                <Route  path=\"/starships\" \r\n                                        exact \r\n                                        component={StarshipPage} />\r\n                                <Route  path=\"/starships/:id\" \r\n                                        render={({ match: {params: {id}}}) => <StarshipDetails itemId={id}/>} />\r\n\r\n                                <Route  \r\n                                    path=\"/login\"\r\n                                    render={() => \r\n                                        <LoginPage \r\n                                            isLoggedIn={isLoggedIn}\r\n                                            onLogin={this.onLogin}/>} />\r\n                                <Route  \r\n                                    path=\"/secret\"\r\n                                    render={() => \r\n                                        <SecretPage isLoggedIn={isLoggedIn }/>} />\r\n                                <Route render={() => <h2>Page not found</h2>} />\r\n                            </Switch>\r\n                        </div>\r\n                    </Router>\r\n                </SwapiServiceProvider>\r\n            </ErrorBoundry>\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}